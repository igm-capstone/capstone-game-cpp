#include <stdafx.h>
#include "SpriteManager.h"
#include <Rig3D/Graphics/Interface/IShaderResource.h>

void SpriteManager::Initialize(Rig3D::IMesh* spriteMesh, Rig3D::IShaderResource* spriteShaderResource)
{
	mRenderer = (Rig3D::Singleton<Rig3D::Engine>::SharedInstance()).GetRenderer();
	mSpritesShaderResource = spriteShaderResource;
	mSpriteMesh = spriteMesh;

	LoadFont("Assets/UI/Fonts/ashcanbb_reg.ttf_sdf.png");
	LoadFont("Assets/UI/Fonts/ashcanbb_bold.ttf_sdf.png");
	LoadSpriteSheet("Assets/UI/Health.png", 900, 112, 1, 3);
	LoadSpriteSheet("Assets/UI/UI_ghostIcons.png", 256, 256, 4, 4);
	LoadSpriteSheet("Assets/UI/UI_playerIcons1024.png", 256, 256, 4, 4);
	LoadSpriteSheet("Assets/UI/Panels.png", 1024, 256, 1, 4);
	LoadSpriteSheet("Assets/UI/Keys.png", 96, 96, 8, 2);
}

void SpriteManager::LoadSpriteSheet(const char* filename, int spriteWidth, int spriteHeight, int slicesX, int slicesY)
{
	mFilenames[mSheets] = filename;

	mSpriteSheetData[mSheets].sheetWidth = spriteWidth*slicesX;
	mSpriteSheetData[mSheets].sheetHeight = spriteHeight*slicesY;
	mSpriteSheetData[mSheets].slicesX = slicesX;
	mSpriteSheetData[mSheets].slicesY = slicesY;

	mSheets++;
}

void SpriteManager::LoadFont(const char* filename)
{
	//Quite hardcoded for now;

	const int sdf_spacing0[] = {
		32,935,1019,4,4,-1500,1500,66375,
		33,286,635,33,122,11937,114562,54500,
		34,798,0,71,69,6562,129687,85187,
		35,743,733,113,107,5750,120687,120500,
		36,544,792,72,149,7062,130937,85500,
		37,438,364,106,127,6375,118437,115187,
		38,636,500,108,118,7375,113750,112875,
		39,184,590,32,64,7625,124812,43750,
		40,0,283,57,162,7687,136312,67187,
		41,0,800,55,161,8437,132750,67125,
		42,916,133,79,73,8250,134437,90875,
		43,608,133,75,80,4500,97437,84500,
		44,636,964,46,56,5125,32000,52125,
		45,935,990,77,29,8000,53375,88687,
		46,392,623,39,35,7500,24750,54312,
		47,227,242,103,137,1687,122437,100812,
		48,438,602,101,108,6250,95250,108375,
		49,233,133,86,106,687,94312,84187,
		50,438,710,93,115,5937,100000,97812,
		51,0,683,76,117,2875,107062,80750,
		52,286,0,69,122,5000,100125,73187,
		53,946,500,78,116,6875,99062,86250,
		54,319,133,77,108,5312,105562,83750,
		55,355,0,70,110,4375,90625,75062,
		56,99,353,77,124,4187,103937,85937,
		57,99,700,77,121,4125,101000,85812,
		58,177,934,42,76,7062,65375,54062,
		59,176,700,47,106,3375,81687,51500,
		60,227,511,79,124,3062,125750,82812,
		61,869,0,79,62,5312,87312,88687,
		62,227,379,76,132,2937,125250,80312,
		63,330,878,91,115,6500,111937,101875,
		64,0,0,142,133,8625,123562,154687,
		65,838,840,97,124,3687,115125,99312,
		66,848,500,98,116,6375,111375,103937,
		67,438,825,89,120,4812,113437,94375,
		68,744,500,104,112,3812,109312,109312,
		69,722,242,91,107,3250,106500,96062,
		70,818,364,92,123,3812,114437,90687,
		71,636,618,107,117,5625,111812,111875,
		72,438,491,100,111,5750,108562,106625,
		73,181,821,28,107,10625,106625,44500,
		74,636,735,99,118,812,112312,91625,
		75,910,364,95,119,1812,112437,94000,
		76,952,618,72,114,7062,109937,79500,
		77,99,133,134,109,2937,107750,134500,
		78,330,660,97,109,1687,107750,101937,
		79,856,733,106,99,3062,102500,110125,
		80,99,590,85,110,-2312,108062,82187,
		81,743,618,106,115,4500,99687,107250,
		82,636,853,105,111,-562,108375,99250,
		83,0,569,78,114,5437,110125,86687,
		84,99,477,83,113,-750,109937,79000,
		85,629,242,93,110,3375,107875,94812,
		86,99,821,82,113,1000,109812,77937,
		87,99,242,128,111,3250,108375,126250,
		88,330,769,97,109,5750,107375,102250,
		89,730,364,88,132,3375,119250,93000,
		90,444,242,101,103,5750,104500,108187,
		91,227,635,59,166,4375,139000,65312,
		92,544,364,92,144,1687,123562,91687,
		93,330,489,62,171,5437,139500,72062,
		94,743,967,77,50,7500,142687,86875,
		95,330,993,91,26,7062,6250,105250,
		96,682,964,51,42,5250,128750,60375,
		97,544,941,87,79,5750,72812,89750,
		98,469,133,68,102,7062,99062,77312,
		99,674,0,66,84,5437,77875,74062,
		100,545,0,63,110,6812,102312,77875,
		101,740,0,58,94,6375,87187,67437,
		102,425,0,57,133,6062,104562,61625,
		103,636,364,94,136,-62,98875,93250,
		104,218,0,68,124,7062,117500,77937,
		105,392,489,37,134,8437,119375,46312,
		106,544,508,69,161,-30437,115125,45187,
		107,0,445,74,124,6562,107562,78062,
		108,305,801,25,120,9875,105500,41875,
		109,813,242,120,80,7812,77875,133312,
		110,99,934,78,84,3687,74250,85750,
		111,683,133,81,74,5125,70625,85812,
		112,482,0,63,112,5250,77187,71875,
		113,142,0,76,111,2750,73750,72875,
		114,608,0,66,86,4937,85562,67312,
		115,962,733,62,90,5625,81312,69187,
		116,396,133,73,100,-875,87375,71937,
		117,843,133,73,80,6687,83062,75937,
		118,537,133,71,94,875,85250,68250,
		119,438,945,100,77,3062,75187,103312,
		120,764,133,79,75,5437,69500,85812,
		121,544,669,90,123,-1500,80687,89000,
		122,227,926,89,91,3875,83125,93562,
		123,935,840,79,150,7187,125812,105687,
		124,933,242,84,113,6250,109625,91687,
		125,0,133,99,150,17875,136375,118937,
		126,838,964,97,42,7062,76937,107437,
		162,227,801,78,125,6687,114500,86875,
		163,743,840,95,127,6687,117812,104375,
		164,849,618,103,115,4187,111625,112312,
		165,545,242,84,122,5625,116250,97500,
		169,330,364,108,125,7375,121000,121062,
		174,330,242,114,122,8000,119625,125937,
		0
	};

	const int sdf_spacing1[] = {
		32,942,1009,4,4,-1500,1500,62312,
		33,502,827,38,121,8562,104437,53812,
		34,872,0,77,71,7000,113375,86062,
		35,743,729,113,107,4687,108375,119750,
		36,543,662,76,147,6000,119312,86187,
		37,437,362,106,126,4687,108000,115062,
		38,636,497,108,117,5187,103312,114812,
		39,502,948,37,67,8000,109125,49437,
		40,99,698,60,159,7687,124500,67875,
		41,159,698,58,158,6312,121437,69812,
		42,507,0,81,75,6750,117562,92750,
		43,698,132,77,82,5812,87750,88375,
		44,872,71,50,59,5187,33000,55687,
		45,841,984,79,34,5625,48625,88750,
		46,178,434,43,40,10625,26187,60875,
		47,226,241,103,136,2000,111750,103437,
		48,437,719,101,108,3000,87625,103437,
		49,226,917,88,106,-1625,86687,82437,
		50,329,486,94,115,6687,92000,102625,
		51,0,751,78,117,3000,98125,84375,
		52,140,0,72,121,3937,92500,77437,
		53,0,636,80,115,2375,91500,84000,
		54,232,132,78,108,4937,96125,86812,
		55,434,0,73,110,-1750,83812,71812,
		56,99,352,79,123,3750,95875,85250,
		57,0,393,79,120,250,93312,82687,
		58,178,352,46,82,7375,65687,57125,
		59,949,0,51,106,6375,76875,61125,
		60,226,670,81,123,2750,113500,89812,
		61,791,0,81,69,3375,82250,88750,
		62,226,377,78,131,-625,113750,80187,
		63,329,601,93,115,5187,101750,101687,
		64,0,0,140,132,4812,112250,146562,
		65,743,836,98,123,-62,104875,96750,
		66,730,362,99,116,4250,101437,104375,
		67,437,599,91,120,2500,103375,93500,
		68,744,497,104,112,3375,99500,108125,
		69,724,241,92,107,1062,96750,94125,
		70,829,362,94,122,1562,104250,93812,
		71,636,614,107,117,2125,101625,108875,
		72,437,488,100,111,3812,99187,104500,
		73,186,588,33,107,8562,96875,47500,
		74,636,862,100,117,1187,102187,92125,
		75,923,362,96,118,2062,102437,99437,
		76,360,0,74,113,3000,99937,76750,
		77,99,132,133,109,2000,97875,134812,
		78,329,716,98,109,687,98062,101937,
		79,856,729,106,100,2500,93125,110062,
		80,99,588,87,110,-875,98125,86062,
		81,743,614,106,115,2750,91875,99625,
		82,848,497,105,110,-500,98562,99562,
		83,0,868,80,114,2250,100250,84875,
		84,99,475,85,113,-187,100000,82062,
		85,630,241,94,110,4687,98062,97687,
		86,0,280,84,113,125,100250,81750,
		87,99,241,127,111,2375,98562,126000,
		88,329,825,98,108,4312,97500,102062,
		89,636,731,90,131,937,108750,91437,
		90,443,241,101,104,4062,95312,106687,
		91,226,508,62,162,5750,127125,68812,
		92,543,362,93,142,2750,112875,98312,
		93,437,827,65,167,6312,127625,77500,
		94,743,959,79,53,6000,122812,87750,
		95,636,979,92,31,8437,10187,105250,
		96,791,69,54,46,7250,111375,65875,
		97,456,132,89,81,2625,67562,89562,
		98,386,132,70,103,4062,90437,76125,
		99,657,0,69,86,3687,71937,74437,
		100,953,614,67,110,4062,93562,75062,
		101,962,729,61,95,6875,80250,69375,
		102,159,856,60,132,3937,96812,62187,
		103,636,362,94,135,-1500,92375,94187,
		104,212,0,70,124,5812,106937,78562,
		105,99,857,42,132,5187,108750,44937,
		106,543,504,71,158,-32375,107187,41875,
		107,0,513,76,123,5062,99187,79312,
		108,288,508,30,119,7000,96750,42312,
		109,816,241,119,82,6125,71812,129250,
		110,618,132,80,86,3500,69000,86687,
		111,775,132,83,75,2625,64125,86437,
		112,953,497,66,111,1312,73125,69375,
		113,282,0,78,111,1875,70250,73937,
		114,588,0,69,87,2750,78125,69937,
		115,726,0,65,91,3125,75187,69375,
		116,310,132,76,101,-500,80750,74312,
		117,938,132,75,82,6750,76000,79687,
		118,545,132,73,95,-1375,78437,67750,
		119,329,933,101,79,1187,69312,100875,
		120,858,132,80,77,4437,64625,85500,
		121,543,809,91,122,-2812,76750,87812,
		122,543,931,90,93,2500,77000,93937,
		123,841,836,81,148,8062,115250,106562,
		124,935,241,85,113,7000,99687,93125,
		125,0,132,99,148,16625,123812,121687,
		126,922,962,98,47,9437,68625,112187,
		162,226,793,79,124,5187,104500,87687,
		163,922,836,95,126,8062,107312,108187,
		164,849,614,104,115,4312,101500,112875,
		165,544,241,86,121,6500,105812,98687,
		168,938,1009,4,4,-1500,1500,148375,
		169,329,362,108,124,6375,109812,122937,
		174,329,241,114,121,9312,108562,128312,
		180,934,1009,4,4,-1500,1500,148375,
		212,922,1009,4,4,-1500,1500,148375,
		213,926,1009,4,4,-1500,1500,148375,
		219,930,1009,4,4,-1500,1500,148375,
		0
	};

	mFilenames[mSheets] = filename;
	memcpy(&mGlyphsData[mFonts], sdf_spacing0, sizeof(sdf_spacing0));

	mFonts++;
	memcpy(&mGlyphsData[mFonts], sdf_spacing1, sizeof(sdf_spacing1));


	mFonts++;
	mSheets++;
}

void SpriteManager::DrawSprite(SpriteSheetCode sheetID, int spriteID, vec2f pos, vec2f scale, vec2f linearFill, float radialFill)
{
	mSpriteInstanceData[mSprites].pointpos = pos;
	mSpriteInstanceData[mSprites].sheetID = sheetID;
	mSpriteInstanceData[mSprites].spriteID = spriteID;
	mSpriteInstanceData[mSprites].size = scale;
	mSpriteInstanceData[mSprites].linearFill = linearFill;
	mSpriteInstanceData[mSprites].radialFill = radialFill;
	
	mSprites++;
}

void SpriteManager::DrawSpriteAtPerc(SpriteSheetCode sheetID, int spriteID, vec2f screenPerc, vec2f scale, vec2f linearFill, float radialFill)
{
	auto pos = screenPerc;
	pos.x *= mRenderer->GetWindowWidth();
	pos.y *= mRenderer->GetWindowHeight();

	DrawSprite(sheetID, spriteID, pos, scale, linearFill, radialFill);
}

void SpriteManager::DrawTextSprite(FontCode fontID, vec2f pos, vec2f scale, char* fmt, ...)
{
	char buf[100];
	va_list args;
	va_start(args, fmt);
	vsnprintf(buf, 100, fmt, args);

	for each(char c in buf)
	{
		if (c == '\0') break;
		Glyph& g = mGlyphsData[fontID][c - 32];
		DrawGlyph(fontID, g, pos + vec2f(g.xoffset / 1000.0f, -g.yoffset / 1000.0f) * scale, scale);
		pos += vec2f(g.xadvance / 1000.0f, 0) * scale;
	}

}

void SpriteManager::DrawTextSpriteAtPerc(FontCode fontID, vec2f screenPerc, vec2f scale, char* fmt, ...)
{
	char buf[100];
	va_list args;
	va_start(args, fmt);
	vsnprintf(buf, 100, fmt, args);

	auto pos = screenPerc;
	pos.x *= mRenderer->GetWindowWidth();
	pos.y *= mRenderer->GetWindowHeight();

	for each(char c in buf)
	{
		if (c == '\0') break;
		Glyph& g = mGlyphsData[fontID][c - 32];
		DrawGlyph(fontID, g, pos + vec2f(g.xoffset / 1000.0f, -g.yoffset / 1000.0f) * scale, scale);
		pos += vec2f(g.xadvance / 1000.0f, 0) * scale;
	}
}

void SpriteManager::DrawGlyph(FontCode fontID, Glyph& glyph, vec2f pos, vec2f scale)
{
	mGlyphInstanceData[mGlyphs].pointpos = pos;
	mGlyphInstanceData[mGlyphs].sheetID = fontID;
	mGlyphInstanceData[mGlyphs].scale = scale;
	mGlyphInstanceData[mGlyphs].size = vec2f((float)glyph.width, (float)glyph.height);
	mGlyphInstanceData[mGlyphs].minUV = vec2f(glyph.x / 1024.0f, glyph.y / 1024.0f);
	mGlyphInstanceData[mGlyphs].maxUV = vec2f((glyph.x + glyph.width) / 1024.0f, (glyph.y + glyph.height) / 1024.0f);
	mGlyphs++;
}